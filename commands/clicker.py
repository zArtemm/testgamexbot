from mubble import Dispatch, Message, CallbackQuery
from mubble.rules import CallbackData, CallbackDataMarkup

from database.user import User
from keyboards import Keyboard
from tools.randomizer import get_random_emoji

dp = Dispatch()


@dp.callback_query(CallbackData("clicker_menu"))
async def clicker_menu(cq: CallbackQuery):
    user = await User.get_or_none(uid=cq.from_user.id)
    await cq.edit_text(
        f"üç™ <b>{user.nickname}</b>, –≤—ã –≤ –º–µ–Ω—é –∫–ª–∏–∫–µ—Ä–∞!\n"
        f"{get_random_emoji()} <b>–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ –ø–æ–ª–Ω–æ–π!</b>",
        parse_mode="HTML",
        reply_markup=Keyboard.clicker_menu,
    )


# –ú–∞–≥–∞–∑–∏–Ω –∫–ª–∏–∫–æ–≤
@dp.callback_query(CallbackData("clicker_shop"))
async def clicker_shop(cq: CallbackQuery):
    user = await User.get_or_none(uid=cq.from_user.id)
    await cq.edit_text(
        f"üõí <b>{user.nickname}</b>, –≤—ã –≤ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞!\n"
        f"{get_random_emoji()} <b>–ü–æ–∫—É–ø–∞–π—Ç–µ –∫–ª–∏–∫–∏ —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à –¥–æ—Ö–æ–¥!</b>",
        parse_mode="HTML",
        reply_markup=Keyboard.clicker_shop,
    )


# –¢–æ–ø –∫–ª–∏–∫–µ—Ä–æ–≤
@dp.callback_query(CallbackData("clicker_top"))
async def clicker_top(cq: CallbackQuery):
    user = await User.get_or_none(uid=cq.from_user.id)
    top_clickers = await User.all().order_by("-clicker_clicks_total").limit(10)

    users = [
        f'<a href="tg://user?id={user.uid}">{user.nickname}</a> ‚Äî {user.clicker_clicks_total:,d}üç™'
        for user in top_clickers
    ]

    await cq.edit_text(
        f"{get_random_emoji()} <b>{user.nickname}</b>, –≤—ã –≤ –º–µ–Ω—é —Ç–æ–ø –∫–ª–∏–∫–µ—Ä–æ–≤!\n\n"
        f"üèÜ <b>–¢–æ–ø –∫–ª–∏–∫–µ—Ä–æ–≤: </b>\n" + "\n".join(users),
        parse_mode="HTML",
        reply_markup=Keyboard.clicker_top,
    )


# –ö–ª–∏–∫–µ—Ä
@dp.callback_query(CallbackData("clicker_click"))
async def clicker_click(cq: CallbackQuery):
    user = await User.get_or_none(uid=cq.from_user.id)
    user.clicker_clicks_total += user.clicker_click
    await user.save()

    await cq.answer(
        "üç™ –ö–ª–∏–∫–µ—Ä\n"
        f"+{user.clicker_click}\n"
        f"–í—Å–µ–≥–æ: {user.clicker_clicks_total}\n",
        show_alert=False,
    )


# –î–æ–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É
@dp.callback_query(CallbackDataMarkup("clicks_<amount>"))
async def clicker_buying(cq: CallbackQuery, amount: int):
    prices = {"5": 50, "100": 950, "1000": 9250}
    user = await User.get_or_none(uid=cq.from_user.id)

    if user.clicker_clicks_total >= prices[amount]:
        user.clicker_clicks_total -= prices[amount]
        user.clicker_click += int(amount)
        await cq.answer(
            "üç™ –ö–ª–∏–∫–µ—Ä\n"
            f"–£—Å–ø–µ—à–Ω–æ!\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –∑–∞ —Ä–∞–∑: {user.clicker_click}\n",
            show_alert=False,
        )
        await user.save()

    else:
        await cq.answer(
            "üç™ –ö–ª–∏–∫–µ—Ä\n"
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!\n"
            f"–í—Å–µ–≥–æ: {user.clicker_clicks_total}\n",
            show_alert=False,
        )
        return
